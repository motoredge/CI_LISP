Grammar

    0 $accept: program $end

    1 program: s_expr EOL

    2 s_expr: number
    3       | f_expr
    4       | QUIT
    5       | error
    6       | symbol
    7       | LPAREN let_section s_expr RPAREN

    8 let_section: LPAREN let_list RPAREN

    9 let_list: LET let_element
   10         | let_list let_element

   11 let_element: LPAREN SYMBOL s_expr RPAREN
   12            | LPAREN INT SYMBOL s_expr RPAREN
   13            | LPAREN DOUBLE SYMBOL s_expr RPAREN

   14 number: INT_LITERAL
   15       | DOUBLE_LITERAL

   16 symbol: SYMBOL

   17 f_expr: LPAREN FUNC s_expr RPAREN
   18       | LPAREN FUNC s_expr s_expr RPAREN


Terminals, with rules where they appear

$end (0) 0
error (256) 5
FUNC (258) 17 18
SYMBOL (259) 11 12 13 16
INT_LITERAL (260) 14
DOUBLE_LITERAL (261) 15
LPAREN (262) 7 8 11 12 13 17 18
RPAREN (263) 7 8 11 12 13 17 18
EOL (264) 1
LET (265) 9
QUIT (266) 4
INT (267) 12
DOUBLE (268) 13


Nonterminals, with rules where they appear

$accept (14)
    on left: 0
program (15)
    on left: 1, on right: 0
s_expr (16)
    on left: 2 3 4 5 6 7, on right: 1 7 11 12 13 17 18
let_section (17)
    on left: 8, on right: 7
let_list (18)
    on left: 9 10, on right: 8 10
let_element (19)
    on left: 11 12 13, on right: 9 10
number (20)
    on left: 14 15, on right: 2
symbol (21)
    on left: 16, on right: 6
f_expr (22)
    on left: 17 18, on right: 3


state 0

    0 $accept: . program $end

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    INT_LITERAL     shift, and go to state 3
    DOUBLE_LITERAL  shift, and go to state 4
    LPAREN          shift, and go to state 5
    QUIT            shift, and go to state 6

    program  go to state 7
    s_expr   go to state 8
    number   go to state 9
    symbol   go to state 10
    f_expr   go to state 11


state 1

    5 s_expr: error .

    $default  reduce using rule 5 (s_expr)


state 2

   16 symbol: SYMBOL .

    $default  reduce using rule 16 (symbol)


state 3

   14 number: INT_LITERAL .

    $default  reduce using rule 14 (number)


state 4

   15 number: DOUBLE_LITERAL .

    $default  reduce using rule 15 (number)


state 5

    7 s_expr: LPAREN . let_section s_expr RPAREN
   17 f_expr: LPAREN . FUNC s_expr RPAREN
   18       | LPAREN . FUNC s_expr s_expr RPAREN

    FUNC    shift, and go to state 12
    LPAREN  shift, and go to state 13

    let_section  go to state 14


state 6

    4 s_expr: QUIT .

    $default  reduce using rule 4 (s_expr)


state 7

    0 $accept: program . $end

    $end  shift, and go to state 15


state 8

    1 program: s_expr . EOL

    EOL  shift, and go to state 16


state 9

    2 s_expr: number .

    $default  reduce using rule 2 (s_expr)


state 10

    6 s_expr: symbol .

    $default  reduce using rule 6 (s_expr)


state 11

    3 s_expr: f_expr .

    $default  reduce using rule 3 (s_expr)


state 12

   17 f_expr: LPAREN FUNC . s_expr RPAREN
   18       | LPAREN FUNC . s_expr s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    INT_LITERAL     shift, and go to state 3
    DOUBLE_LITERAL  shift, and go to state 4
    LPAREN          shift, and go to state 5
    QUIT            shift, and go to state 6

    s_expr  go to state 17
    number  go to state 9
    symbol  go to state 10
    f_expr  go to state 11


state 13

    8 let_section: LPAREN . let_list RPAREN

    LET  shift, and go to state 18

    let_list  go to state 19


state 14

    7 s_expr: LPAREN let_section . s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    INT_LITERAL     shift, and go to state 3
    DOUBLE_LITERAL  shift, and go to state 4
    LPAREN          shift, and go to state 5
    QUIT            shift, and go to state 6

    s_expr  go to state 20
    number  go to state 9
    symbol  go to state 10
    f_expr  go to state 11


state 15

    0 $accept: program $end .

    $default  accept


state 16

    1 program: s_expr EOL .

    $default  reduce using rule 1 (program)


state 17

   17 f_expr: LPAREN FUNC s_expr . RPAREN
   18       | LPAREN FUNC s_expr . s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    INT_LITERAL     shift, and go to state 3
    DOUBLE_LITERAL  shift, and go to state 4
    LPAREN          shift, and go to state 5
    RPAREN          shift, and go to state 21
    QUIT            shift, and go to state 6

    s_expr  go to state 22
    number  go to state 9
    symbol  go to state 10
    f_expr  go to state 11


state 18

    9 let_list: LET . let_element

    LPAREN  shift, and go to state 23

    let_element  go to state 24


state 19

    8 let_section: LPAREN let_list . RPAREN
   10 let_list: let_list . let_element

    LPAREN  shift, and go to state 23
    RPAREN  shift, and go to state 25

    let_element  go to state 26


state 20

    7 s_expr: LPAREN let_section s_expr . RPAREN

    RPAREN  shift, and go to state 27


state 21

   17 f_expr: LPAREN FUNC s_expr RPAREN .

    $default  reduce using rule 17 (f_expr)


state 22

   18 f_expr: LPAREN FUNC s_expr s_expr . RPAREN

    RPAREN  shift, and go to state 28


state 23

   11 let_element: LPAREN . SYMBOL s_expr RPAREN
   12            | LPAREN . INT SYMBOL s_expr RPAREN
   13            | LPAREN . DOUBLE SYMBOL s_expr RPAREN

    SYMBOL  shift, and go to state 29
    INT     shift, and go to state 30
    DOUBLE  shift, and go to state 31


state 24

    9 let_list: LET let_element .

    $default  reduce using rule 9 (let_list)


state 25

    8 let_section: LPAREN let_list RPAREN .

    $default  reduce using rule 8 (let_section)


state 26

   10 let_list: let_list let_element .

    $default  reduce using rule 10 (let_list)


state 27

    7 s_expr: LPAREN let_section s_expr RPAREN .

    $default  reduce using rule 7 (s_expr)


state 28

   18 f_expr: LPAREN FUNC s_expr s_expr RPAREN .

    $default  reduce using rule 18 (f_expr)


state 29

   11 let_element: LPAREN SYMBOL . s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    INT_LITERAL     shift, and go to state 3
    DOUBLE_LITERAL  shift, and go to state 4
    LPAREN          shift, and go to state 5
    QUIT            shift, and go to state 6

    s_expr  go to state 32
    number  go to state 9
    symbol  go to state 10
    f_expr  go to state 11


state 30

   12 let_element: LPAREN INT . SYMBOL s_expr RPAREN

    SYMBOL  shift, and go to state 33


state 31

   13 let_element: LPAREN DOUBLE . SYMBOL s_expr RPAREN

    SYMBOL  shift, and go to state 34


state 32

   11 let_element: LPAREN SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 35


state 33

   12 let_element: LPAREN INT SYMBOL . s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    INT_LITERAL     shift, and go to state 3
    DOUBLE_LITERAL  shift, and go to state 4
    LPAREN          shift, and go to state 5
    QUIT            shift, and go to state 6

    s_expr  go to state 36
    number  go to state 9
    symbol  go to state 10
    f_expr  go to state 11


state 34

   13 let_element: LPAREN DOUBLE SYMBOL . s_expr RPAREN

    error           shift, and go to state 1
    SYMBOL          shift, and go to state 2
    INT_LITERAL     shift, and go to state 3
    DOUBLE_LITERAL  shift, and go to state 4
    LPAREN          shift, and go to state 5
    QUIT            shift, and go to state 6

    s_expr  go to state 37
    number  go to state 9
    symbol  go to state 10
    f_expr  go to state 11


state 35

   11 let_element: LPAREN SYMBOL s_expr RPAREN .

    $default  reduce using rule 11 (let_element)


state 36

   12 let_element: LPAREN INT SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 38


state 37

   13 let_element: LPAREN DOUBLE SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 39


state 38

   12 let_element: LPAREN INT SYMBOL s_expr RPAREN .

    $default  reduce using rule 12 (let_element)


state 39

   13 let_element: LPAREN DOUBLE SYMBOL s_expr RPAREN .

    $default  reduce using rule 13 (let_element)
